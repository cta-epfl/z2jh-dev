# This file can update the JupyterHub Helm chart's default configuration values.
#
# For reference see the configuration reference and default values, but make
# sure to refer to the Helm chart version of interest to you!
#
# Introduction to YAML:     https://www.youtube.com/watch?v=cdLNKUoMc6c
# Chart config reference:   https://zero-to-jupyterhub.readthedocs.io/en/stable/resources/reference.html
# Chart default values:     https://github.com/jupyterhub/zero-to-jupyterhub-k8s/blob/HEAD/jupyterhub/values.yaml
# Available chart versions: https://jupyterhub.github.io/helm-chart/
#

# Configure user environment
singleuser:
  image:
    # You should replace the "latest" tag with a fixed version from:
    # https://hub.docker.com/r/jupyter/datascience-notebook/tags/
    # Inspect the Dockerfile at:
    # https://github.com/jupyter/docker-stacks/tree/HEAD/datascience-notebook/Dockerfile
    name: datascience-notebook
    tag: 0.0.2-dev
  # `cmd: null` allows the custom CMD of the Jupyter docker-stacks to be used
  # which performs further customization on startup.
  cmd: null

prePuller:
  hook:
    enabled: false

# TODO: Install additional python dependencies
hub:
  config:
    GitHubOAuthenticator:
      client_id: 
      client_secret: 
      oauth_callback_url: http://localhost:30000/hub/oauth_callback
      allowed_users:
        - ph0tonic
      admin_users:
        - ph0tonic
    # GitLabOAuthenticator:
    #   client_id: 
    #   client_secret: 
    #   oauth_callback_url: http://localhost:30000/hub/gitlab/oauth_callback
    #   gitlab_url: https://gitlab.switch.ch # http://gitlab.epfl.ch
    #   allowed_users:
    #     - bastien.wermeille
    # JupyterHub:
    # authenticator_class: gitlab
    # authenticator_class: github
  image:
    # name: jupyterhub/k8s-hub
    # tag: 3.2.1
    name: k8s-hub
    tag: 3.1.0-dev
  loadRoles:
    user:
      scopes:
        - self
    downloadservice:
      users:
        - volodymyr.savchenko
        - andrii.neronov
        - pavlo.kashko
        - github_ph0tonic
        - bastien.wermeille
      scopes:
        - "access:services!service=downloadservice"
        - "access:services!service=certificateservice"
  service:
    extraPorts:
      - port: 5000
        targetPort: 5000
        name: downloadservice
      - port: 5001
        targetPort: 5001
        name: certificateservice
  services:
    downloadservice:
      url: http://hub:5000
      command:
        - /usr/local/bin/python3
        - /downloadservice/downloadservice/cli.py
      oauth_no_confirm: true
      environment:
        JUPYTERHUB_SERVICE_PREFIX: /services/downloadservice
        JUPYTERHUB_API_URL: http://127.0.0.1:8081/hub/api
    certificateservice:
      url: http://hub:5001
      command:
        - /usr/local/bin/python3
        - /downloadservice/certificateservice/cli.py
      oauth_no_confirm: true
      environment:
        JUPYTERHUB_SERVICE_PREFIX: /services/downloadservice
        JUPYTERHUB_API_URL: http://127.0.0.1:8081/hub/api
  networkPolicy:
    allowedIngressPorts:
      - 5000
      - 5001
    ingress:
      - ports:
          - port: 5000
          - port: 5001
        from:
          - podSelector:
              matchLabels:
                hub.jupyter.org/network-access-hub: "true"
  extraFiles:
    errorTemplate:
      mountPath: /usr/local/share/jupyterhub/templates/error.html

  # extraConfig:
  #   auth.py: |
  #     from oauthenticator.github import GitHubOAuthenticator
  #     from oauthenticator.gitlab import GitLabOAuthenticator
  #     c.MultiAuthenticator.authenticators = [
  #         (GitHubOAuthenticator, '/github', {
  #             'service_name': 'github',
  #             'client_id': '',
  #             'client_secret': '',
  #             'oauth_callback_url': 'http://localhost:30000/hub/github/oauth_callback',
  #             'allowed_users': {'ph0tonic'},
  #             'admin_users': {'ph0tonic'},
  #         }),

  #         (GitLabOAuthenticator, '/gitlab', {
  #             'service_name': 'gitlab',
  #             'client_id': '',
  #             'client_secret': '',
  #             'oauth_callback_url': 'http://localhost:30000/hub/gitlab/oauth_callback',
  #             'gitlab_url': 'https://gitlab.switch.ch',
  #             'allowed_users': {'volodymyr.savchenko', 'andrii.neronov', 'pavlo.kashko'},
  #             'admin_users': {'volodymyr.savchenko', 'andrii.neronov', 'pavlo.kashko'},
  #         }),
  #     ]

  #     c.JupyterHub.authenticator_class = 'multiauthenticator.multiauthenticator.MultiAuthenticator'

  extraConfig:
    spawner.py: |
      import os
      import json
      import re
      import urllib.request

      from tornado import gen, concurrent

      from jupyterhub.spawner import LocalProcessSpawner, Spawner
      from traitlets import (
          Instance, Type, Tuple, List, Dict, Integer, Unicode, Float, Any
      )
      from traitlets import directional_link

      # Utility to create dummy Futures to return values through yields
      def _yield_val(x=None):
          f = concurrent.Future()
          f.set_result(x)
          return f

      class WrapSpawner(Spawner):

          # Grab this from constructor args in case some Spawner ever wants it
          config = Any()

          child_class = Type(LocalProcessSpawner, Spawner,
              config=True,
              help="""The class to wrap for spawning single-user servers.
                      Should be a subclass of Spawner.
                      """
              )

          child_config = Dict(default_value={},
              config=True,
              help="Dictionary of config values to apply to wrapped spawner class."
              )

          child_state = Dict(default_value={})

          child_spawner = Instance(Spawner, allow_none=True)

          def construct_child(self):
              if self.child_spawner is None:
                  self.child_spawner = self.child_class(
                      user = self.user,
                      db   = self.db,
                      hub  = self.hub,
                      authenticator = self.authenticator,
                      orm_spawner = self.orm_spawner,
                      cookie_options = self.cookie_options,
                      server_token_scopes = self.server_token_scopes,
                      oauth_access_scopes = self.oauth_access_scopes,
                      oauth_client_allowed_scopes = self.oauth_client_allowed_scopes,
                      oauth_client_id = self.oauth_client_id,
                      server = self._server,
                      config = self.config,
                      **self.child_config
                      )
                  print(self.config)
                  
                  # initial state will always be wrong since it will see *our* state
                  self.child_spawner.clear_state()
                  if self.child_state:
                      self.child_spawner.load_state(self.child_state)

                  # link traits common between self and child
                  common_traits = (
                      set(self.trait_names()) &
                      set(self.child_spawner.trait_names()) -
                      set(self.child_config.keys())
                  )
                  print(f"Common traits : {common_traits}")
                  # directional_link((self.child_spawner, 'port'), (self, 'port'), )
                  for trait in common_traits:
                      print(f"New link : {trait} : {getattr(self,trait)} previously : {getattr(self.child_spawner,trait)}")
                      directional_link((self, trait), (self.child_spawner, trait), )
              return self.child_spawner

          def load_child_class(self, state):
              # Subclasses must arrange for correct child_class setting from load_state
              pass

          def load_state(self, state):
              super().load_state(state)
              self.load_child_class(state)
              self.child_config.update(state.get('child_conf', {}))
              self.child_state = state.get('child_state', {})
              self.construct_child()

          def get_state(self):
              state = super().get_state()
              state['child_conf'] = self.child_config
              if self.child_spawner:
                  self.child_state = state['child_state'] = self.child_spawner.get_state()
              return state

          def clear_state(self):
              super().clear_state()
              if self.child_spawner:
                  self.child_spawner.clear_state()
              self.child_state = {}
              self.child_config = {}
              self.child_spawner = None

          # proxy functions for start/poll/stop
          # pass back the child's Future, or create a dummy if needed

          def start(self):
              if not self.child_spawner:
                  self.construct_child()
              return self.child_spawner.start()

          def stop(self, now=False):
              if self.child_spawner:
                  return self.child_spawner.stop(now)
              else:
                  return _yield_val()

          def poll(self):
              if self.child_spawner:
                  return self.child_spawner.poll()
              else:
                  return _yield_val(1)

          if hasattr(Spawner, 'progress'):
              @property
              def progress(self):
                  if self.child_spawner:
                      return self.child_spawner.progress
                  else:
                      raise RuntimeError("No child spawner yet exists - can not get progress yet")

          # Manually link server attribute since it is not a traitlet

          @property
          def server(self):
              if not self.child_spawner:
                  self.construct_child()
              return self.child_spawner.server

          @server.setter
          def server(self, server):
              if not self.child_spawner:
                  self.construct_child()
              self.child_spawner.server = server


      class ProfilesSpawner(WrapSpawner):

          """ProfilesSpawner - leverages the Spawner options form feature to allow user-driven
              configuration of Spawner classes while permitting:
              1) configuration of Spawner classes that don't natively implement options_form
              2) administrator control of allowed configuration changes
              3) runtime choice of which Spawner backend to launch
          """

          profiles = List(
              trait = Tuple( Unicode(), Unicode(), Type(Spawner), Dict() ),
              default_value = [ ( 'Local Notebook Server', 'local', LocalProcessSpawner,
                                  {'start_timeout': 15, 'http_timeout': 10} ) ],
              minlen = 1,
              config = True,
              help = """List of profiles to offer for selection. Signature is:
                  List(Tuple( Unicode, Unicode, Type(Spawner), Dict )) corresponding to
                  profile display name, unique key, Spawner class, dictionary of spawner config options.

                  The first three values will be exposed in the input_template as {display}, {key}, and {type}"""
              )

          child_profile = Unicode()

          form_template = Unicode(
              """<label for="profile">Select a job profile:</label>
              <select class="form-control" name="profile" required autofocus>
              {input_template}
              </select>
              """,
              config = True,
              help = """Template to use to construct options_form text. {input_template} is replaced with
                  the result of formatting input_template against each item in the profiles list."""
              )

          first_template = Unicode('selected',
              config=True,
              help="Text to substitute as {first} in input_template"
              )

          input_template = Unicode("""
              <option value="{key}" {first}>{display}</option>""",
              config = True,
              help = """Template to construct {input_template} in form_template. This text will be formatted
                  against each item in the profiles list, in order, using the following key names:
                  ( display, key, type ) for the first three items in the tuple, and additionally
                  first = "checked" (taken from first_template) for the first item in the list, so that
                  the first item starts selected."""
              )

          def _options_form_default(self):
              temp_keys = [ dict(display=p[0], key=p[1], type=p[2], first='') for p in self.profiles ]
              temp_keys[0]['first'] = self.first_template
              text = ''.join([ self.input_template.format(**tk) for tk in temp_keys ])
              return self.form_template.format(input_template=text)

          def options_from_form(self, formdata):
              # Default to first profile if somehow none is provided
              return dict(profile=formdata.get('profile', [self.profiles[0][1]])[0])

          # load/get/clear : save/restore child_profile (and on load, use it to update child class/config)

          def select_profile(self, profile):
              # Select matching profile, or do nothing (leaving previous or default config in place)
              for p in self.profiles:
                  if p[1] == profile:
                      self.child_class = p[2]
                      self.child_config = p[3]
                      break

          def construct_child(self):
              self.child_profile = self.user_options.get('profile', "")
              self.select_profile(self.child_profile)
              super().construct_child()

          def load_child_class(self, state):
              try:
                  self.child_profile = state['profile']
              except KeyError:
                  self.child_profile = ''
              self.select_profile(self.child_profile)

          def get_state(self):
              state = super().get_state()
              state['profile'] = self.child_profile
              return state

          def clear_state(self):
              super().clear_state()
              self.child_profile = ''

      class DockerProfilesSpawner(ProfilesSpawner):

          """DockerProfilesSpawner - leverages ProfilesSpawner to dynamically create DockerSpawner
              profiles dynamically by looking for docker images that end with "jupyterhub". Due to the
              profiles being dynamic the "profiles" config item from the ProfilesSpawner is renamed as
              "default_profiles". Please note that the "docker" and DockerSpawner packages are required
              for this spawner to work.
          """

          default_profiles = List(
              trait = Tuple( Unicode(), Unicode(), Type(Spawner), Dict() ),
              default_value = [],
              config = True,
              help = """List of profiles to offer in addition to docker images for selection. Signature is:
                  List(Tuple( Unicode, Unicode, Type(Spawner), Dict )) corresponding to
                  profile display name, unique key, Spawner class, dictionary of spawner config options.

                  The first three values will be exposed in the input_template as {display}, {key}, and {type}"""
              )

          docker_spawner_args = Dict(
              default_value = {},
              config = True,
              help = "Args to pass to DockerSpawner."
          )

          jupyterhub_docker_tag_re = re.compile('^.*jupyterhub$')

          def _nvidia_args(self):
              try:
                  resp = urllib.request.urlopen('http://localhost:3476/v1.0/docker/cli/json')
                  body = resp.read().decode('utf-8')
                  args =  json.loads(body)
                  return dict(
                      read_only_volumes={vol.split(':')[0]: vol.split(':')[1] for vol in args['Volumes']},
                      extra_create_kwargs={"volume_driver": args['VolumeDriver']},
                      extra_host_config={"devices": args['Devices']},
                  )
              except urllib.error.URLError:
                  return {}


          def _docker_profile(self, nvidia_args, image):
              spawner_args = dict(container_image=image, network_name=self.user.name)
              spawner_args.update(self.docker_spawner_args)
              spawner_args.update(nvidia_args)
              nvidia_enabled = "w/GPU" if len(nvidia_args) > 0 else "no GPU"
              return ("Docker: (%s): %s"%(nvidia_enabled, image), "docker-%s"%(image), "dockerspawner.SystemUserSpawner", spawner_args)

          def _jupyterhub_docker_tags(self):
              try:
                  include_jh_tags = lambda tag: self.jupyterhub_docker_tag_re.match(tag)
                  return filter(include_jh_tags, [tag for image in docker.from_env().images.list() for tag in image.tags])
              except NameError:
                  raise Exception('The docker package is not installed and is a dependency for DockerProfilesSpawner')

          def _docker_profiles(self):
              return [self._docker_profile(self._nvidia_args(), tag) for tag in self._jupyterhub_docker_tags()]

          @property
          def profiles(self):
              return self.default_profiles + self._docker_profiles()

          @property
          def options_form(self):
              temp_keys = [ dict(display=p[0], key=p[1], type=p[2], first='') for p in self.profiles]
              temp_keys[0]['first'] = self.first_template
              text = ''.join([ self.input_template.format(**tk) for tk in temp_keys ])
              return self.form_template.format(input_template=text)


      # vim: set ai expandtab softtabstop=4:

      # import batchspawner

      # c.JupyterHub.spawner_class = 'kubespawner.KubeSpawner'
      # c.KubeSpawner.server_token_scopes = ['access:services!service=downloadservice']

      # c.Spawner.http_timeout = 120
      # c.ProfilesSpawner.ip = '0.0.0.0'
      # c.ProfilesSpawner.port = 0
      # c.KubeSpawner.port = 0
      # print("=================== LOGS")
      # print(type(dict(c.KubeSpawner)))
      # def remove_none(obj):
      #   if isinstance(obj, (list, tuple, set)):
      #     return type(obj)(remove_none(x) for x in obj if x is not None)
      #   elif isinstance(obj, dict):
      #     return type(obj)((remove_none(k), remove_none(v))
      #       for k, v in obj.items() if k is not None and v is not None)
      #   else:
      #     return obj

      # new_dict = remove_none(dict(c.KubeSpawner))
      # print(f"config : {new_dict}")

      c.ProfilesSpawner.profiles = [
          ('Kube', 'kubespawner', 'kubespawner.KubeSpawner', c.KubeSpawner),
          ('Kube Second', 'arcspawner', 'kubespawner.KubeSpawner', {})
      ]
      c.JupyterHub.spawner_class = ProfilesSpawner

      # ('Arc Spawner', 'arcspawner', 'batchspawner.ARCSpawner',
      #   dict(req_nprocs='2', req_runtime='8:00:00', req_memory='4gb', image="cta-epfl/datascience-notebook")
      # )
